/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public\kotakkkk.gltf --types 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useLoader } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    ["(Base)_BAK_040X38X40"]: THREE.Mesh;
  };
  materials: {
    FrontColor: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Kotak(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/kotakkkk.gltf") as GLTFResult;
  const [colorMap, normalMap, roughnessMap, aoMap] = useLoader(
    THREE.TextureLoader,
    [
      "Wood_027_basecolor.jpg",
      "Wood_027_normal.jpg",
      "Wood_027_roughness.jpg",
      "Wood_027_ambientOcclusion.jpg",
    ]
  );
  colorMap.repeat.set(6, 6);
  normalMap.repeat.set(6, 6);
  roughnessMap.repeat.set(6, 6);
  aoMap.repeat.set(6, 6);

  // textures.repeat = new THREE.Vector2(5, 5);
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes["(Base)_BAK_040X38X40"].geometry}
        material={materials.FrontColor}
        rotation={[Math.PI / 2, 0, 0]}
      >
        <meshStandardMaterial
          map={colorMap}
          normalMap={normalMap}
          roughnessMap={roughnessMap}
          aoMap={aoMap}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/kotakkkk.gltf");
